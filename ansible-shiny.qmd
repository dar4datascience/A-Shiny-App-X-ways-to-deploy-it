Running Ansible inside a Docker container to set up another Docker container for deploying a Shiny Server is a feasible approach. Here's how you could outline the process:

1. **Create an Ansible Playbook**: Develop an Ansible playbook that includes tasks for setting up the environment required for deploying the Shiny Server Docker container. This playbook should handle tasks like installing Docker, copying necessary files, building the Docker image, and running the Docker container.

2. **Build the Ansible Docker Image**: Create a Dockerfile for building an image that contains Ansible and any dependencies required for your playbook. This Dockerfile will set up the environment needed to run Ansible tasks.

3. **Run the Ansible Playbook Inside a Docker Container**: Use the Dockerfile from step 2 to build the Docker image. Then, run a Docker container based on this image, mounting the directory containing your Ansible playbook as a volume inside the container. This allows Ansible to access your playbook and execute it.

4. **Execute the Playbook**: Inside the Docker container, execute the Ansible playbook using the `ansible-playbook` command. This will trigger the tasks defined in your playbook, which will set up the environment for deploying the Shiny Server Docker container.

5. **Build and Run the Shiny Server Docker Container**: Within the Ansible playbook tasks, include steps to build the Docker image for the Shiny Server and run the container. You can use Ansible's `docker_image` and `docker_container` modules to perform these tasks.

By following this approach, you can encapsulate the process of setting up the entire server environment with Ansible inside a Docker container, providing a consistent and reproducible deployment workflow.


## Commnad

Based of `Dockerfile.ansible`

```
export IMAGE="dar4datascience/ansible-shiny:demo"
export FILE="Dockerfile.ansible"
DOCKER_BUILDKIT=1 docker build --no-cache -f $FILE -t $IMAGE .
docker run -p 8080:3838 $IMAGE
```